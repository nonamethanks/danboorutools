[tool.poetry]
name = "danboorutools"
version = "0.1.0"
description = "A set of danbooru admin tools."
authors = ["nonamethanks <nonamethanks@nonamethanks.xyz>"]

[tool.poetry.scripts]
create_artist_tags = "danboorutools.scripts.create_artist_tags:main"
rename_socks = "danboorutools.scripts.rename_socks:main"
nuke_tag_edits = "danboorutools.scripts.nuke_tag_edits:main"
nuke_votes = "danboorutools.scripts.nuke_votes:main"
test_parsing = "danboorutools.scripts.test_parsing:main"
replace_ehentai_samples = "danboorutools.scripts.replace_ehentai_samples:main"
tag_paid_rewards_on_gelbooru = "danboorutools.scripts.tag_paid_rewards_on_gelbooru:main"
sockpuppet_discord_monitor = "danboorutools.scripts.sockpuppet_discord_monitor:main"
promotions = "danboorutools.scripts.promotion_suggestions:main"
raffle = "danboorutools.scripts.raffle_picker:main"

create_url_template = "danboorutools.scripts.create_url_template:main"

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.31.0"
python-dateutil = "^2.9.0.post0"
click = "^8.1.7"
loguru = "^0.7.2"
python-dotenv = "^1.0.1"
selenium = "^4.19.0"
filetype = "^1.2.0"
beautifulsoup4 = "^4.12.3"
html5lib = "^1.1"
ipython = "^8.22.2"
setuptools = "^69.2.0"
peewee = "^3.17.1"
python-twitter = "^3.5"
backoff = "^2.2.1"
unidecode = "^1.3.8"
pydantic = "^2.6.4"
mastodon-py = "^1.8.1"
cloudscraper = "^1.2.71"
pyrate-limiter = "<3.0.0"
requests-oauthlib = "^1.4.1"
deviantart = "^0.1.5"
ring = "^0.10.1"
pillow = "^10.2.0"
imagehash = "^4.3.1"
discord-webhook = "^1.3.1"
urllib3 = "^2.2.1"
fake-useragent = "^1.5.1"
google-cloud-bigquery = "^3.19.0"
celery = "^5.3.6"
redis = "^5.0.3"
watchdog = { extras = ["watchmedo"], version = "^4.0.0" }
py-trans = "^0.6.1"
aiofiles = "^23.2.1"                                      # needed for py-trans
pykakasi = "^2.2.1"
pyyaml = "^6.0.1"
selenium-wire = "^5.1.0"
py-cord = "^2.5.0"

[tool.poetry.group.dev.dependencies]
types-requests = "^2.31.0.20240311"
pylint = "^3.1.0"
types-python-dateutil = "^2.9.0.20240316"
mypy = "^1.9.0"
autopep8 = "^2.1.0"
types-pkg-resources = "^0.1.3"
types-pytz = "^2024.1.0.20240203"
pyinstrument = "^4.6.2"
line-profiler = "^4.1.2"
ruff = "^0.2.1"
types-beautifulsoup4 = "^4.12.0.20240229"
types-pillow = "^10.2.0.20240324"
celery-types = "^0.22.0"
types-peewee = "^3.17.0.20240311"
types-pyyaml = "^6.0.12.20240311"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.autopep8]
max_line_length = 140

[tool.isort]
line_length = 140

[tool.mypy]
check_untyped_defs = true
enable_error_code = "redundant-expr,ignore-without-code"
warn_unused_ignores = true
show_column_numbers = true
show_error_codes = true
strict_equality = true


[[tool.mypy.overrides]]
module = [
    "cloudscraper.*",
    "deviantart.*",
    "fake_useragent.*",
    "filetype.*",
    "ring.*",
    "billiard.*",
]
ignore_missing_imports = true


[tool.ruff]
target-version = "py311"
line-length = 140
select = ["ALL"]
ignore = [
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN101",  # missing type annotation for self
    "ANN102",  # missing type annotation for cls
    "ANN204",  # missing return type for special methods
    "BLE001",  # catch Exception
    "D",       # docstrings
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal
    "ERA001",  # found commented-out code
    "FBT",     # flake8-boolean-trap
    "G004",    # Logging statement uses f-string
    "PLR2004", # allow-magic-value-types
    "PT",      # pytest style
    "RET504",  # Unnecessary variable assignment before `return` statement
    "RET505",  # Unnecessary `else` after `return` statement
    "RET506",  # Unnecessary `else` after `raise` statement
    "RET507",  # Unnecessary `else` after `continue` statement
    "RUF001",  # allowed-confusables
    "RUF003",  # Comment contains ambiguous unicode character
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF018",  # Avoid assignment expressions in `assert` statements
    "S101",    # assert detected
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes # I don't fucking care
    "SIM105",  # Use `contextlib.suppress(KeyError)` instead of try-except-pass
    "SIM114",  # Combine `if` branches using logical `or` operator
    "SLF001",  # Private member accessed
    "TD002",   # Missing author in TODO,
    "TD003",   # Missing issue link
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.per-file-ignores]
"conftest.py" = [
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
]

"tests/*" = [
    "C408", # unnecessary dict/list/tuple call
    "E501", # max-line-length
    "S101", # use of assert
]
"tests/urls/*" = [
    "ANN001", # Missing type annotation for function argument
    "ANN201", # Missing return type annotation for public function
]
"danboorutools/logical/sessions/*" = [
    "A003",   # shadowing builtin variables like id can't be helped for api responsese
    "N815",   # camelCase properties from api responses
    "TCH003", # TYPE_CHECKING suggestions, interferes with pydantic
]

"danboorutools/logical/parsers/*" = [
    "E501",    # line too long
    "PLR0911", # too many returns
]


[tool.pycodestyle]
max-line-length = 140

[tool.pylint]
disable = [
    "assignment-from-no-return",    # pylint is too fucking retarded to understand when a function is just a fucking stub under a fucking type checking block
    "broad-except",
    "import-outside-toplevel",      # there are legitimate cases and i'm experienced enough to know when not to do this
    "line-too-long",                # already covered by ruff
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-break",
    "no-else-continue",
    "no-else-raise",
    "no-else-return",
    "no-member",                    # too many stupid false positives: https://github.com/PyCQA/pylint/issues/4693
    "protected-access",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-public-methods",
    "too-many-return-statements",
    "use-dict-literal",
    "useless-else-on-loop",
]

[tool.pylint.FORMAT]
ignore-long-lines = '^\s*(# )?"?<?https?:\/\/\S+>?'
max-line-length = 140
good-names = ["e", "id"]


[tool.pylint."MESSAGES CONTROL"]
enable = "useless-suppression"
extension-pkg-whitelist = ["_testcapi", "pydantic"]


[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]
log_level = "0"
log_cli = true
addopts = "-raP --showlocals -vv -m 'not autoignore'"
markers = [
    "scraping",
    "parsing",
    "danbooru",
    "gallery",
    "artist",
    "post",
    "info",
    "file",
    "redirect",
    "artist_finder",
    "autoignore",
]
